scriptencoding utf8

"--------------------------
"  [ Configuration Menu ]
"--------------------------
"
" -- Start-up Process
"
" -- Plugins
"
"    -- Plugins Manager
"    -- Color Schemes
"
" -- Options
"
"    -- Encodings
"    -- Edit Behavior
"    -- Key Stroke
"    -- Indents
"    -- Colors
"    -- Text Search
"    -- Text Styles
"    -- Fold
"    -- Register
"    -- Command Mode
"    -- Insert Mode
"    -- User Interface
"    -- Cursor
"    -- Tuning
"
" -- Functions
"



"------------------------------------------
" [ About of this config ]
"------------------------------------------
" Configuration of Vim !!
"
" -- Repository
"
"      https://github.com/yukpiz/dotfiles.git
"
" -- Contact
"
"      Twitter: @yukpiz
"      Email:   yukpiz@gmail.com



" --- Start-up Process {{{

let s:is_windows = has('win32')
let s:is_cygwin = has('win32unix')
let s:is_kaoriya = has('kaoriya')
let s:is_doswin = s:is_windows && !s:is_cygwin && !has('gui')
let s:is_unix = has('unix')
let s:is_mac = has('mac')
let s:is_macosx = has('macunix')

" }}}


" --- Plugins {{{

" --- Plugins Manager {{{

if has('vim_starting')
    "Initialize NeoBundle.
    set runtimepath+=~/.vim/bundle/neobundle.vim
    call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    call neobundle#end()
endif

" }}}

" --- Color Schemes {{{
NeoBundle "yukpiz/vim-railscasts-theme"
" }}}


" }}}



" --- Options {{{
"Setting in 'set' command to write here.

" --- Encodings {{{
"Used in Vim internal encoding,
" it buffer and register of text,
" and in expression internal text, etc.
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,sjis,ucs-bom,default,latin1
"Line break code to be used.
set fileformats=unix,dos,mac
" }}}

" --- Edit Behavior {{{
"When a file is changed, reread automatically.
set autoread

"Not create undofile.
set noundofile

"The combination of 'writebackup' and 'nobackup',
" and then delete the backup file when have successfully save.
set writebackup
set nobackup
" }}}

" --- Key Stroke {{{

"Enable the backspace to auto indent,
" line break and beginning of line.
set backspace=indent,eol,start

" }}}

" --- Indents {{{
"Enable the indentation setting by the modeline.
set modeline

"When exceeds the width, and to new line at blank,
" but when the value is 0, it is disabled.
set textwidth=0

"Replaces <Tab> to blank.
set expandtab

"When entered the <Tab>, replaces to four blank.
set tabstop=4

"The number of blank to be used during the automatic indentation.
set shiftwidth=4

"When entered the new line,
" do automatic indentation.
set autoindent

"Unknown...
set smartindent

" }}}

" --- Colors {{{
syntax on

"Use a 256 colors.
set t_Co=256
colorscheme railscasts
" }}}

" --- Text Search {{{
"After search until the end line,
" to return to the top line.
set wrapscan

"When the search,
" it is not distinguish between upper case and lower case.
set ignorecase

"When entered at upper case,
" it is distinguish between upper case and lower case.
set smartcase

"Do the incremental search.
set incsearch

"Highlighting the search result.
set hlsearch

"When search, to disabled the IME mode.
set imsearch=0
" }}}

" --- Text Styles {{{
set wrap
set ambiwidth=double
set showmatch
set matchtime=3
set list listchars=tab:>.
set list listchars+=trail:_
set display=uhex
" }}}

" --- Fold {{{
set foldmethod=marker
set foldopen+=jump
set foldenable
" }}}

" --- Register {{{
"Use a register of clipboard.
if has('xterm_clipboard')
    set clipboard+=autoselect
    set clipboard+=unnamed
    set clipboard+=unnamedplus
endif
" }}}

" --- Command Mode {{{
"Use a completion of the command mode.
if has('wildmenu')
    set wildmenu
    set wildchar=<Tab>
    set wildmode=full
endif

"The number of command history.
set history=50
" }}}

" --- Insert Mode {{{
"When start the insert mode, to disabled the IME mode.
set iminsert=0
" }}}

" --- User Interface {{{
"Text of titlebar of GUI Window.
set title
set titlestring=Hello\ VIM٩(ˊᗜˋ*)

"Show ruler at status line.
set ruler

"Not show line number.
set nonumber
set numberwidth=6

set laststatus=1
set statusline=%!GetStatusLineLabel()
augroup CurrentWindowCursorLine
    autocmd! CurrentWindowCursorLine
    autocmd WinLeave,BufLeave * set nocursorline
    autocmd WinEnter,BufRead * set cursorline
augroup END
set guifont=Ricty:h9
set guitablabel=%N:\ %{GetGuiTabLabel()}
set guioptions+=m
set guioptions+=C
set guioptions-=T
" }}}

" --- Cursor {{{
"Buffer of area of scrolling.
set scrolloff=5
" }}}

" --- Tuning {{{
set lazyredraw
" }}}

" }}}

" --- Functions {{{
function! GetStatusLineLabel()
    return '[%F]%h%m%r ' .
    \ '%{"[".(&ft!=""?&ft:"")."]"}' .
    \ '%{"[".(&fenc!=""?&fenc:&enc)."]"}' .
    \ '%{"[".(&ff!=""?&ff:"")."]"}' .
    \ '%=' .
    \ '[%v, %l/%L] %P [%b:0x%B]'
endfunction

function! GetGuiTabLabel()
    let l:label = ''
    let l:bufnrlist = tabpagebuflist(v:lnum)
    let l:bufname = fnamemodify(bufname(l:bufnrlist[tabpagewinnr(v:lnum) - 1]), ':t')
    let l:label .= l:bufname ==# '' ? 'No title' : l:bufname
    let l:wincount = tabpagewinnr(v:lnum, '$')
    if l:wincount > 1
        let l:label .= '[' . l:wincount . ']'
    endif
    for bufnr in l:bufnrlist
        if getbufvar(bufnr, '&modified')
            let l:label .= '[+]'
            break
        endif
    endfor
    return l:label
endfunction
" }}}

