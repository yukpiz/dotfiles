scriptencoding utf8

"--------------------------
"  [ Configuration Menu ]
"--------------------------
"
" -- Start-up Process
"
" -- Plugins
"
"    -- Plugins Manager
"    -- Color Schemes
"
" -- Set Options
"
"    -- Encodings
"    -- Edit Behavior
"    -- Key Stroke
"    -- Indents
"    -- Text Search
"    -- Syntax & Styles
"    -- Fold
"    -- Register
"    -- Command Mode
"    -- Insert Mode
"    -- User Interface
"    -- Cursor
"    -- Tuning
"
" -- File Types
"
" -- Functions
"
" -- Key Mappings
"
"    -- Cheet Sheet
"    -- Cursor
"    -- Highlight
"    -- Shortcut



"------------------------------------------
" [ About of this config ]
"------------------------------------------
" Configuration of Vim !!
"
" -- Repository
"
"      https://github.com/yukpiz/dotfiles.git
"
" -- Contact
"
"      Twitter: @yukpiz
"      Email:   yukpiz@gmail.com


" --- Start-up Process {{{

let s:is_windows = has('win32')
let s:is_cygwin = has('win32unix')
let s:is_kaoriya = has('kaoriya')
let s:is_doswin = s:is_windows && !s:is_cygwin && !has('gui')
let s:is_unix = has('unix')
let s:is_mac = has('mac')
let s:is_macosx = has('macunix')

" }}}


" --- Plugins {{{

" --- Plugins Manager {{{

if has('vim_starting')
    "Initialize NeoBundle.
    set runtimepath+=~/.vim/bundle/neobundle.vim
    call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    call neobundle#end()
endif

" }}}

" --- Color Schemes {{{
NeoBundle "yukpiz/vim-railscasts-theme"
" }}}


" }}}


" --- Set Options {{{
"Setting in 'set' command to write here.

" --- Encodings {{{
"Used in Vim internal encoding,
" it buffer and register of text,
" and in expression internal text, etc.
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,sjis,ucs-bom,default,latin1
"Line break code to be used.
set fileformats=unix,dos,mac
" }}}

" --- Edit Behavior {{{
"When a file is changed, reread automatically.
set autoread

"Not create undofile.
set noundofile

"The combination of 'writebackup' and 'nobackup',
" and then delete the backup file when have successfully save.
set writebackup
set nobackup
" }}}

" --- Key Stroke {{{

"Enable the backspace to auto indent,
" line break and beginning of line.
set backspace=indent,eol,start

" }}}

" --- Indents {{{
"Enable the indentation setting by the modeline.
set modeline

"When exceeds the width, and to new line at blank,
" but when the value is 0, it is disabled.
set textwidth=0

"Replaces <Tab> to blank.
set expandtab

"When entered the <Tab>, replaces to four blank.
set tabstop=4

"The number of blank to be used during the automatic indentation.
set shiftwidth=4

"When entered the new line,
" do automatic indentation.
set autoindent

"Unknown...
set smartindent

" }}}

" --- Text Search {{{
"After search until the end line,
" to return to the top line.
set wrapscan

"When the search,
" it is not distinguish between upper case and lower case.
set ignorecase

"When entered at upper case,
" it is distinguish between upper case and lower case.
set smartcase

"Do the incremental search.
set incsearch

"Highlighting the search result.
set hlsearch

"When search, to disabled the IME mode.
set imsearch=0
" }}}

" --- Syntax & Styles {{{
set wrap
set ambiwidth=double
set showmatch
set matchtime=3
set list listchars=tab:>.
set list listchars+=trail:_
set display=uhex
if has('syntax')
    function! ActivateInvisibleIndicator()
        syntax match InvisibleJISX0208Space "　"
        \ display containedin=ALL
        highlight InvisibleJISX0208Space
        \ term=underline
        \ ctermbg=LightGray
        \ guibg=LightGray
    endfunction
    augroup Invisible
        autocmd! Invisible
        autocmd BufNew,BufRead * call ActivateInvisibleIndicator()
    augroup END

    execute 'set colorcolumn=' . join(range(91, 9999), ',')
    syntax on

    set t_Co=256
    set background=dark
    colorscheme railscasts
    highlight Normal ctermbg=none
endif

" }}}

" --- Fold {{{
set foldmethod=marker
set foldopen+=jump
set foldenable
" }}}

" --- Register {{{
"Use a register of clipboard.
if has('xterm_clipboard')
    set clipboard+=autoselect
    set clipboard+=unnamed
    set clipboard+=unnamedplus
endif
" }}}

" --- Command Mode {{{
"Use a completion of the command mode.
if has('wildmenu')
    set wildmenu
    set wildchar=<Tab>
    set wildmode=full
endif

"The number of command history.
set history=50
" }}}

" --- Insert Mode {{{
"When start the insert mode, to disabled the IME mode.
set iminsert=0
" }}}

" --- User Interface {{{
"Text of titlebar of GUI Window.
set title
set titlestring=Hello\ VIM٩(ˊᗜˋ*)

"Show ruler at status line.
set ruler

"Not show line number.
set nonumber
set numberwidth=6

set laststatus=1
set statusline=%!GetStatusLineLabel()
augroup CurrentWindowCursorLine
    autocmd! CurrentWindowCursorLine
    autocmd WinLeave,BufLeave * set nocursorline
    autocmd WinEnter,BufRead * set cursorline
augroup END
set guifont=Ricty:h9
set guitablabel=%N:\ %{GetGuiTabLabel()}
set guioptions-=m
set guioptions-=T
" }}}

" --- Cursor {{{
"Buffer of area of scrolling.
set scrolloff=5
" }}}

" --- Tuning {{{
set lazyredraw
" }}}

" }}}


" --- Filetypes {{{
augroup FileTypeCustomize
    autocmd! FileTypeCustomize
    autocmd FileType * set formatoptions=""
    autocmd BufNewFile,BufRead *.coffee set filetype=coffee
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
    autocmd BufNewFile,BufRead *.vb set filetype=vbnet
    autocmd BufNewFile,BufRead *.scala set filetype=scala
    autocmd FileType xml,html,yaml set sw=2 ts=2 et
    autocmd FileType rst set sw=3 ts=3 et
    autocmd FileType ruby,python,c,cpp,css,coffee,haskell set sw=4 ts=4 et
    autocmd FileType javascript,java,php,vb,sh,make set sw=4 ts=4 et
    autocmd FileType vbnet set foldmarker=#Region,#End\ Region
    autocmd FileType vim set foldmarker={{{,}}}
    autocmd FileType vim let g:vim_indent_cont = 0
    autocmd FileTYpe python set indentkeys+=0#
    autocmd FileType cpp setlocal path=,/usr/include,/usr/local/include
augroup END

" }}}


" --- Functions {{{
function! GetStatusLineLabel()
    return '[%F]%h%m%r ' .
    \ '%{"[".(&ft!=""?&ft:"")."]"}' .
    \ '%{"[".(&fenc!=""?&fenc:&enc)."]"}' .
    \ '%{"[".(&ff!=""?&ff:"")."]"}' .
    \ '%=' .
    \ '[%v, %l/%L] %P [%b:0x%B]'
endfunction

function! GetGuiTabLabel()
    let l:label = ''
    let l:bufnrlist = tabpagebuflist(v:lnum)
    let l:bufname = fnamemodify(bufname(l:bufnrlist[tabpagewinnr(v:lnum) - 1]), ':t')
    let l:label .= l:bufname ==# '' ? 'No title' : l:bufname
    let l:wincount = tabpagewinnr(v:lnum, '$')
    if l:wincount > 1
        let l:label .= '[' . l:wincount . ']'
    endif
    for bufnr in l:bufnrlist
        if getbufvar(bufnr, '&modified')
            let l:label .= '[+]'
            break
        endif
    endfor
    return l:label
endfunction

function! SwitchNumber()
    if &nu == 0
        set nu
    else
        set nonu
    endif
endfunction

let g:calendar_on = 0
function! SwitchCalendar()
    call s:all_close_calendar()
    if g:calendar_on == 0
        Calendar -view=month -split=horizontal -position=below -height=25
        let w:calendar_window = 1
        let g:calendar_on = 1
    else
        let g:calendar_on = 0
    endif
endfunction

function! s:all_close_calendar()
    let l:li = gift#tabpagewinnr_list()
    for tw in l:li
        call gift#jump_window(tw)
        if exists('w:calendar_window') == 1
            if w:calendar_window == 1
                call gift#close_window(tw)
                call s:all_close_calendar()
            endif
        endif
    endfor
endfunction

function! OpenBrowserParsedURL()
    let mlist = matchlist(getline('.'), '\v[(|\[|\s](https?:\/\/[^>]*)[)|\]|\s]')
    if mlist != []
        call openbrowser#open(mlist[1])
    else
        echo 'URL is not found in the current line.'
    endif
endfunction

" }}}


" --- Key Mappings {{{

" --- Cheet Sheet {{{
" # Key Mappings Cheet Sheet
" +---------------+--------+--------+---------+--------+
" | Command       | Normal | Insert | Command | Visual |
" |:------------- |:------:|:------:|:-------:|:------:|
" | map/noremap   | o      | x      | x       | o      |
" | nmap/nnoremap | o      | x      | x       | x      |
" | imap/inoremap | x      | o      | x       | x      |
" | cmap/cnoremap | x      | x      | o       | x      |
" | vmap/vnoremap | x      | x      | x       | o      |
" | map!/noremap! | x      | o      | o       | x      |
" +---------------+--------+--------+---------+--------+

"
" | Arguments | Description 
" |:--------- |:------------------
" | <buffer>  |
" | <nowait>  |
" | <silent>  |
" | <special> |
" | <script>  |
" | <expr>    |
" | <unique>  |
" }}}

" --- Cursor {{{
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
nnoremap <C-f> <End>
nnoremap <C-d> <Home>
inoremap <C-d> <Home>
inoremap <C-f> <End>
nnoremap <C-o> :call OpenBrowserParsedURL()<CR>
inoremap <C-o> <ESC>:call OpenBrowserParsedURL()<CR>

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
" }}}

" --- Highlight {{{
nnoremap <silent> <Esc><Esc> :noh<CR>
" }}}

" --- Shortcut {{{
nnoremap ,cl :call SwitchCalendar()<CR>
nnoremap ,vs :VimShell<CR>
nnoremap ,nt :NERDTreeToggle<CR>
nnoremap ,nu :call SwitchNumber()<CR>
" }}}

" }}}


